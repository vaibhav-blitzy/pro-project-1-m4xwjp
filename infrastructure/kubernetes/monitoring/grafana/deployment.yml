apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: production
  labels:
    app: grafana
    component: monitoring
    tier: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: monitoring
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: grafana
        component: monitoring
        tier: visualization
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        checksum/config: "${CONFIG_CHECKSUM}"
        security.policy/version: "v1.0"
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:9.5.3
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin-credentials
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
          resources:
            limits:
              cpu: "1000m"
              memory: "1Gi"
            requests:
              cpu: "200m"
              memory: "512Mi"
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana
              readOnly: true
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-logs
              mountPath: /var/log/grafana
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 30
          securityContext:
            runAsUser: 472
            runAsGroup: 472
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-logs
          emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - grafana
                topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 60